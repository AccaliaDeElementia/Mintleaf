/*jslint node:true, maxlen:80 */
/* vim: set filetype=javascript syntax=javascript: */

'use strict';

var fs = require('fs'),
    async = require('async'),
    es = require('event-stream'),
    reduce = require('stream-reduce'),
    base64 = require('base64-stream'),
    mime = require('mime'),
    i = 0;

function listdir(path, callback) {
    var fullpath = this.base + path.replace(/\/$/, ''),
        basepath = path.replace(/\/$/, '');
    fs.readdir(fullpath, function (err, items) {
        if (err) {
            return callback(err);
        }
        var paths = items.map(function (path) {
            return fullpath + '/' + path;
        });
        async.map(paths, fs.stat, function (err, results) {
            if (err) {
                return callback(err);
            }
            var result = {
                'dirs': [],
                'files': []
            };
            results.forEach(function (item, idx) {
                var path1 = basepath + '/' + items[idx],
                    path2 = fullpath + '/' + items[idx];

                if (item.isDirectory()) {
                    result.dirs.push(path1);
                } else {
                    if (/^image/.test(mime.lookup(path2))) {
                        result.files.push(path1);
                    }
                }
            });
            callback(undefined, result);
        });
    });
}

function getfile(path, callback) {
    if (typeof path !== 'string') {
        return callback('Path must be a string!');
    }
    var type = mime.lookup(path),
        pipeline;
    if (!/^image/.test(type)) {
        return callback(type + ' is not an image!');
    }
    pipeline = es.pipeline(
        fs.createReadStream(this.base + path),
        base64.encode(),
        reduce(function (iv, data) {
            return iv + data;
        }, ''),
        es.map(function (data, cb) {
            callback(undefined, 'data:' + type + ';base64,' + data);
            cb();
        })
    );
    pipeline.on('error', function (e) {
        callback(e);
    });
}

module.exports = function Mintleaf(base) {
    this.base = base;
    this.listdir = listdir.bind(this);
    this.getfile = getfile.bind(this);
};
